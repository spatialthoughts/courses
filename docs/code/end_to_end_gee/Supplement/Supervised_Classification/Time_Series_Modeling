// Example script showing how to fit a harmonic model 
// to a NDVI time-series
// This is largely adapted from
// https://developers.google.com/earth-engine/tutorials/community/time-series-modeling

var s2 = ee.ImageCollection('COPERNICUS/S2_SR_HARMONIZED');

// We define 2 polygons for adjacent farms
var farms = ee.FeatureCollection([
  ee.Feature(
    ee.Geometry.Polygon(
      [[[82.55407706060632, 27.135887938359975],
        [82.55605116644128, 27.135085913223808],
        [82.55613699712976, 27.13527687211144],
        [82.55418434896691, 27.136117087342033]]]),
      {'system:index': '0'}),
    ee.Feature(
      ee.Geometry.Polygon(
        [[[82.54973858752477, 27.137188234050676],
          [82.55046814837682, 27.136806322479018],
          [82.55033940234411, 27.136500792282273],
          [82.5508973018192, 27.136328931179623],
          [82.55119770922887, 27.13688270489774],
          [82.5498887912296, 27.137455571374517]]]),
        {'system:index': '1'})
]);
Map.centerObject(farms);

var geometry = farms.geometry();
//Map.addLayer(geometry, {color: 'grey'}, 'Boundary');
//Map.centerObject(geometry);

var filtered = s2
  .filter(ee.Filter.date('2017-01-01', '2023-01-01'))
  .filter(ee.Filter.bounds(geometry));

// Load the Cloud Score+ collection
var csPlus = ee.ImageCollection('GOOGLE/CLOUD_SCORE_PLUS/V1/S2_HARMONIZED');
var csPlusBands = csPlus.first().bandNames();

// We need to add Cloud Score + bands to each Sentinel-2
// image in the collection
// This is done using the linkCollection() function
var filteredS2WithCs = filtered.linkCollection(csPlus, csPlusBands);

// Function to mask pixels with low CS+ QA scores.
function maskLowQA(image) {
  var qaBand = 'cs';
  var clearThreshold = 0.5;
  var mask = image.select(qaBand).gte(clearThreshold);
  return image.updateMask(mask);
}

var filteredMasked = filteredS2WithCs
  .map(maskLowQA)
  .select('B.*');
  

// Function to add NDVI, time, and constant variables
var addVariables = function(image) {
  // Compute time in fractional years since the epoch.
  var date = image.date();
  var years = date.difference(ee.Date('1970-01-01'), 'year');
  var timeRadians = ee.Image(years.multiply(2 * Math.PI));

  // Return the image with the added bands.
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename(['ndvi']);
  var t = timeRadians.rename('t').float();
  var constant = ee.Image.constant(1);
  return image.addBands([ndvi, t, constant]);
};

var filteredWithVariables = filteredMasked.map(addVariables);
print(filteredWithVariables.first());

// Plot a time series of NDVI at a single location.
var singleFarm = ee.Feature(farms.toList(2).get(0));

// Display a time-series chart
var chart = ui.Chart.image.series({
  imageCollection: filteredWithVariables.select('ndvi'),
  region: singleFarm.geometry(),
  reducer: ee.Reducer.mean(),
  scale: 10
}).setOptions({
      title: 'Original NDVI Time Series',
      interpolateNulls: false,
      vAxis: {title: 'NDVI', viewWindow: {min: 0, max: 1}},
      hAxis: {title: '', format: 'YYYY-MM'},
      lineWidth: 1,
      pointSize: 2,
      series: {
        0: {color: '#238b45'},
      },
    });
print(chart);



// The number of cycles per year to model.
var harmonics = 2;

// Make a list of harmonic frequencies to model.  
// These also serve as band name suffixes.
var harmonicFrequencies = ee.List.sequence(1, harmonics);

// Function to get a sequence of band names for harmonic terms.
var getNames = function(base, list) {
  return ee.List(list).map(function(i) { 
    return ee.String(base).cat(ee.Number(i).int());
  });
};

// Construct lists of names for the harmonic terms.
var cosNames = getNames('cos_', harmonicFrequencies);
var sinNames = getNames('sin_', harmonicFrequencies);



// The dependent variable we are modeling.
var dependent = 'ndvi';

// Independent variables.
var independents = ee.List(['constant', 't']).cat(cosNames).cat(sinNames);


// Function to compute the specified number of harmonics
// and add them as bands. Assumes the time band is present.
var addHarmonics = function(freqs) {
  return function(image) {
    // Make an image of frequencies.
    var frequencies = ee.Image.constant(freqs);
    // This band should represent time in radians.
    var time = ee.Image(image).select('t');
    // Get the cosine terms.
    var cosines = time.multiply(frequencies).cos().rename(cosNames);
    // Get the sin terms.
    var sines = time.multiply(frequencies).sin().rename(sinNames);
    return image.addBands(cosines).addBands(sines);
  };
};

var filteredHarmonic = filteredWithVariables.map(addHarmonics(harmonicFrequencies));

// The output of the regression reduction is a 4x1 array image.
var harmonicTrend = filteredHarmonic
  .select(independents.add(dependent))
  .reduce(ee.Reducer.linearRegression(independents.length(), 1));

// Turn the array image into a multi-band image of coefficients.
var harmonicTrendCoefficients = harmonicTrend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);

// Compute fitted values.
var fittedHarmonic = filteredHarmonic.map(function(image) {
  return image.addBands(
    image.select(independents)
      .multiply(harmonicTrendCoefficients)
      .reduce('sum')
      .rename('fitted'));
});

// Plot the fitted model and the original data at the ROI.

var chart = ui.Chart.image.series({
  imageCollection: fittedHarmonic.select(['fitted', 'ndvi']),
  region: singleFarm.geometry(),
  reducer: ee.Reducer.mean(),
  scale: 10
}).setOptions({
      title: 'NDVI Time Series',
      vAxis: {title: 'NDVI', viewWindow: {min: 0, max: 1}},
      hAxis: {title: '', format: 'YYYY-MM'},
      lineWidth: 1,
      series: {
        1: {color: '#66c2a4', lineDashStyle: [1, 1], pointSize: 1}, // Original NDVI
        0: {color: '#238b45', lineWidth: 2, pointSize: 1 }, // Fitted NDVI
      },
    })
print(chart);

print(fittedHarmonic);
// Compute phase and amplitude.
var phase = harmonicTrendCoefficients.select('sin_1')
  .atan2(harmonicTrendCoefficients.select('cos_1'))
  // Scale to [0, 1] from radians.
  .unitScale(-Math.PI, Math.PI);
var amplitude = harmonicTrendCoefficients.select('sin_1')
  .hypot(harmonicTrendCoefficients.select('cos_1'))
  // Add a scale factor for visualization.
  .multiply(5);
  
var constant = harmonicTrendCoefficients.select('constant');

// Add the phase, amplitude and constant bands to your composite
// which captures the phenology at each pixel.

// Use the HSV to RGB transformation to display phase and amplitude.
var rgb = ee.Image.cat([phase, amplitude, 1]).hsvToRgb();
Map.addLayer(rgb, {}, 'Phase (hue), Amplitude (sat)', false);

// The Phase and Amplitude values will be very different
// at farms following different cropping cycles
// Let's plot and compare the fitted time series
// Farm 1: Single cropping
// Farm 2: Multiple cropping
var chart = ui.Chart.image.seriesByRegion({
  imageCollection: fittedHarmonic.select('fitted'),
  regions: farms,
  reducer: ee.Reducer.mean(),
  scale: 10
}).setSeriesNames(['farm1', 'farm2']).setOptions({
      lineWidth: 1,
      title: 'Fitted NDVI Time Series at 2 Different Farms',
      interpolateNulls: true,
      vAxis: {title: 'NDVI'},
      hAxis: {title: '', format: 'YYYY-MMM'},
    });
print(chart);
