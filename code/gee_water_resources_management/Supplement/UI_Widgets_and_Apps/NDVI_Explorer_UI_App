var geometry = ee.Geometry.Point([77.5979, 13.00896]);
Map.centerObject(geometry, 10)

var s2 = ee.ImageCollection('COPERNICUS/S2_HARMONIZED')

// Load the Cloud Score+ collection
var csPlus = ee.ImageCollection('GOOGLE/CLOUD_SCORE_PLUS/V1/S2_HARMONIZED');
var csPlusBands = csPlus.first().bandNames();

// We need to add Cloud Score + bands to each Sentinel-2
// image in the collection
// This is done using the linkCollection() function
var s2WithCs = s2.linkCollection(csPlus, csPlusBands);

// Function to mask pixels with low CS+ QA scores.
function maskLowQA(image) {
  var qaBand = 'cs';
  var clearThreshold = 0.5;
  var mask = image.select(qaBand).gte(clearThreshold);
  return image.updateMask(mask);
}

var rgbVis = {
  min: 0.0,
  max: 3000,
  bands: ['B4', 'B3', 'B2'],
};

var palette = [
  'FFFFFF', 'CE7E45', 'DF923D', 'F1B555', 'FCD163', '99B718',
  '74A901', '66A000', '529400', '3E8601', '207401', '056201',
  '004C00', '023B01', '012E01', '011D01', '011301'];

var ndviVis = {min:0, max:0.5, palette: palette };

// Write a function that computes NDVI for an image and adds it as a band
function addNDVI(image) {
  var ndvi = image.normalizedDifference(['B8', 'B4']).rename('ndvi');
  return image.addBands(ndvi);
}

function getComposite(geometry) {
  var filtered = s2WithCs
  .filter(ee.Filter.date('2019-01-01', '2019-12-31'))
  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
  .filter(ee.Filter.bounds(geometry))
  .map(maskLowQA);
  // Map the function over the collection
  var withNdvi = filtered.map(addNDVI);

  var composite = withNdvi.median();
  return composite;
}


// Create UI Elements
var title = ui.Label('Global NDVI Explorer');
title.style().set({
  'position':  'top-center',
  'fontSize': '24px'
  });
var resultsPanel = ui.Panel();
var chartPanel = ui.Panel();
var selectionPanel = ui.Panel({
  layout: ui.Panel.Layout.flow('horizontal'),
});
var downloadPanel = ui.Panel();

resultsPanel.style().set({
  width: '400px',
  position: 'bottom-right'
});

var resetPanel = ui.Panel();


resultsPanel.add(selectionPanel);
resultsPanel.add(chartPanel);
resultsPanel.add(downloadPanel);
resultsPanel.add(resetPanel);

// Function to reset the app to initial state
var resetEverything = function() {
  chartPanel.clear();
  selectionPanel.clear();
  downloadPanel.clear();
  resetPanel.clear();

  Map.clear();

  Map.add(title);
  Map.add(resultsPanel);
  Map.onClick(displayChart);
  // Use the current viewport
  var bounds = ee.Geometry.Rectangle(Map.getBounds());
  var composite = getComposite(bounds);
  Map.addLayer(composite, rgbVis, 'Sentinel-2 Composite');
  var label = ui.Label('Click anywhere to see the chart');
  resetPanel.add(label);
};

// Function to create and display NDVI time-series chart
var displayChart = function(point) {
  resetPanel.clear();
  var button = ui.Button({
    label: 'Reset',
    onClick: resetEverything});
  resetPanel.add(button);
  var geometry = ee.Geometry.Point(point['lon'], point['lat']);
  
  var filtered = s2WithCs
    .filter(ee.Filter.date('2019-01-01', '2019-12-31'))
    .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE', 30))
    .map(maskLowQA)
    .map(addNDVI)
    .filter(ee.Filter.bounds(geometry));
  
  var chart = ui.Chart.image.series({
    imageCollection: filtered.select('ndvi'),
    region: geometry,
    reducer: ee.Reducer.mean(),
    scale: 20}).setOptions({
      title: 'NDVI Time Series',
      vAxis: {title: 'NDVI'},
      hAxis: {title: 'Date', gridlines: {count: 12}},
      interpolateNulls: true,
      pointSize: 2,
      lineWidth: 1
    });
      
  chartPanel.clear();
  selectionPanel.clear();
  downloadPanel.clear();
  selectionPanel.add(ui.Label('Choose an image to display:'));
  chartPanel.add(chart);
  
  // S2 collection has overlapping granules for same dates
  // Add a 'date' property so we can merge data for the same date
  filtered = filtered.map(function(image) {
    var dateString = ee.Date(image.date()).format('YYYY-MM-dd');
    return image.set('date', dateString);
  });
  
  var addNdviLayer = function(dateString) {
    var date = ee.Date.parse('YYYY-MM-dd', dateString);
    var image = filtered
      .filter(ee.Filter.date(date, date.advance(1, 'day')))
      .mosaic();
    Map.addLayer(image.select('ndvi'), ndviVis, 'NDVI Image -' + dateString);
  };

  var dates = filtered.aggregate_array('date').distinct();
  
  // Add dates to a dropdown selector
  dates.evaluate(function(dateList){
      selectionPanel.add(ui.Select({
      items: dateList,
      onChange: addNdviLayer,
      placeholder: 'Select a date'
    }));
  });
    
  // Extract the NDVI values as a FeatureCollection
  var ndviFc = ee.FeatureCollection(dates.map(function(dateString) {
    var date = ee.Date.parse('YYYY-MM-dd', dateString);
    var image = filtered
      .filter(ee.Filter.date(date, date.advance(1, 'day')))
      .mosaic();
    
    var ndviImage = image.select('ndvi');
    var stats = ndviImage.reduceRegion({
      reducer: ee.Reducer.mean().setOutputs(['ndvi']),
      geometry: geometry,
      scale: 20
    });
    // Add date as wel as lat/lon columns
    var properties = stats.combine({
      'date': dateString,
      'longitude': point['lon'],
      'latitude': point['lat']
    });
    return ee.Feature(null, properties);
  }));
  
  // Prepare the collection to download
  var downloadReady = function(url) {
    var label = ui.Label({
      value: 'Download CSV',
      targetUrl: url
    });
    downloadPanel.add(label);
  };
  ndviFc.getDownloadURL({
    format: 'CSV',
    selectors: ['date', 'latitude', 'longitude', 'ndvi'],
    filename: 'ndvi_time_series', 
    callback: downloadReady
  });
};
// Call the function to build the initial UI state.
resetEverything();
