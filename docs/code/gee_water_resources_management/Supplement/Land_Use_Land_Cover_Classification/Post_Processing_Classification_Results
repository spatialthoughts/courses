// Sentinel-2 Median Composite
var composite = ee.Image('projects/spatialthoughts/assets/e2e/composite');
var rgbVis = {min: 0.0, max: 3000, bands: ['B4', 'B3', 'B2']};
Map.addLayer(composite, rgbVis, 'Composite');

// Raw Supervised Classification Results
var classified = ee.Image('projects/spatialthoughts/assets/e2e/s2_classification');
var palette = ['#cc6d8f', '#ffc107', '#1e88e5', '#004d40' ];
Map.addLayer(classified, {min: 0, max: 3, palette: palette}, 'Classification');

var boundary = ee.FeatureCollection('projects/spatialthoughts/assets/e2e/basin_boundary');
var geometry = boundary.geometry();
Map.centerObject(geometry, 14);

//************************************************************************** 
// Post process by clustering
//************************************************************************** 

// Cluster using Unsupervised Clustering methods
var seeds = ee.Algorithms.Image.Segmentation.seedGrid(5);

var snic = ee.Algorithms.Image.Segmentation.SNIC({
  image: composite.select('B.*'), 
  compactness: 0,
  connectivity: 4,
  neighborhoodSize: 10,
  size: 2,
  seeds: seeds
});
var clusters = snic.select('clusters');

// Assign class to each cluster based on 'majority' voting (using ee.Reducer.mode()
var smoothed = classified.addBands(clusters);

var clusterMajority = smoothed.reduceConnectedComponents({
  reducer: ee.Reducer.mode(),
  labelBand: 'clusters'
});
Map.addLayer(clusterMajority, {min: 0, max: 3, palette: palette}, 
  'Processed using Clusters');


//************************************************************************** 
// Post process by replacing isolated pixels with surrounding value
//************************************************************************** 

// count patch sizes
var patchsize = classified.connectedPixelCount(40, false);

// run a majority filter
var filtered = classified.focal_mode({
    radius: 10,
    kernelType: 'square',
    units: 'meters',
}); 
  
// updated image with majority filter where patch size is small
var connectedClassified =  classified.where(patchsize.lt(25),filtered);
Map.addLayer(connectedClassified, {min: 0, max: 3, palette: palette}, 
  'Processed using Connected Pixels');

//************************************************************************** 
// Export the Results
//************************************************************************** 
// Pixel-based methods are scale dependent
// Zooming in or out will change the results
// Export the results at the required scale to see the final result.
Export.image.toDrive({
  image: clusterMajority,
  description: 'Post_Processed_with_Clusters',
  folder: 'earthengine',
  fileNamePrefix: 'classification_clusters',
  region: geometry,
  scale: 10,
  maxPixels: 1e10
});

Export.image.toDrive({
  image: connectedClassified,
  description: 'Post_Processed_with_ConnectedPixels',
  folder: 'earthengine',
  fileNamePrefix: 'classification_connected',
  region: geometry,
  scale: 10,
  maxPixels: 1e10
});